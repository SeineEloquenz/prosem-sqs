%! Author = alexa
%! Date = 25.11.2019

@article{hatton2004safer,
    title={Safer language subsets: an overview and a case history, MISRA C},
    author={Hatton, Les},
    journal={Information and Software Technology},
    volume={46},
    number={7},
    pages={465--472},
    year={2004},
    publisher={Elsevier}
}

@article{hatton2007language,
    title={Language subsetting in an industrial context: A comparison of MISRA C 1998 and MISRA C 2004},
    author={Hatton, Les},
    journal={Information and Software Technology},
    volume={49},
    number={5},
    pages={475--482},
    year={2007},
    publisher={Elsevier}
}

@inproceedings{boogerd2008assessing,
    title={Assessing the value of coding standards: An empirical study},
    author={Boogerd, Cathal and Moonen, Leon},
    booktitle={2008 IEEE International Conference on Software Maintenance},
    pages={277--286},
    year={2008},
    organization={IEEE}
}

@article{kornecki2009certification,
    title={Certification of software for real-time safety-critical systems: state of the art},
    author={Kornecki, Andrew and Zalewski, Janusz},
    journal={Innovations in Systems and Software Engineering},
    volume={5},
    number={2},
    pages={149--161},
    year={2009},
    publisher={Springer}
}

@standard{MISRA2004,
    added-at = {2010-01-10T12:29:51.000+0100},
    author = {{MIRA Ltd}},
    biburl = {https://www.bibsonomy.org/bibtex/24af84f2c08b4012aef91dc1c6440ff5e/sjbutler},
    institution = {Motor Industry Software Reliability Association},
    interhash = {6574ea339cdd190f20ece212bdef42ad},
    intrahash = {4af84f2c08b4012aef91dc1c6440ff5e},
    keywords = {source standard C code},
    month = Oct,
    organization = {MIRA},
    timestamp = {2010-01-10T12:29:52.000+0100},
    title = {{MISRA-C}:2004 {G}uidelines for the use of the {C} language in Critical Systems},
    url = {www.misra.org.uk},
    year = 2004
}

@online{misra-website,
    author = {MIRA Ltd},
    title = {MISRA - The Motor Industry Software Reliability Association},
    year = 2020,
    howpublished = {https://www.misra.org.uk/},
    urldate = {2020-01-08}
}

@article{goto-harmful,
    author = {Dijkstra, Edsger W.},
    title = {Letters to the Editor: Go to Statement Considered Harmful},
    year = {1968},
    issue_date = {March 1968},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {11},
    number = {3},
    issn = {0001-0782},
    url = {https://doi.org/10.1145/362929.362947},
    doi = {10.1145/362929.362947},
    journal = {Commun. ACM},
    month = mar,
    pages = {147–148},
    numpages = {2},
    keywords = {conditional clause, alternative clause, program sequencing, repetitive clause, jump instruction, go to statement, program intelligibility, branch instruction}
}

@article{goto-study,
    title = "An empirical study of the use of the GOTO statement",
    journal = "Journal of Systems and Software",
    volume = "11",
    number = "3",
    pages = "217 - 223",
    year = "1990",
    issn = "0164-1212",
    doi = "https://doi.org/10.1016/0164-1212(90)90088-4",
    url = "http://www.sciencedirect.com/science/article/pii/0164121290900884",
    author = "Barbara A. Benander and Narasimhaiah Gorla and Alan C. Benander",
    abstract = "This paper reports on the results of an empirical study on the use of the GOTO statement. A lack of empirical studies on this issue has been acknowledged [1–4]. In this experiment, a total of 311 Cobol programs were input to a Cobol program analyzer for analysis of GOTO usage. The data supplied by the analyzer was then used by SAS (Statistical Analysis System) for statistical analysis. The results of the analysis show that programs with incorrect output used more GOTOs than did programs with correct output. Also, the mean time to debug programs using GOTOs was considerably longer than the mean time to debug GOTO-less programs. There are significant (at the 0.01 level) positive linear and quadratic correlations between the number of GOTOs and debugging time. Furthermore, it is found that programs containing at least one GOTO statement had significantly more “bad performs” (a perform statement invoking paragraphs above, rather than below) than did the GOTO-less programs. Also, in terms of program style, on the average, programs containing at least one GOTO statement had a significantly higher number of mismatched IF-ELSEs, and a higher number of bad indents in True-False tasks, than did programs containing no GOTO statements."
}

@ARTICLE{transgression-data,
    author={E. N. {Adams}},
    journal={IBM Journal of Research and Development},
    title={Optimizing Preventive Service of Software Products},
    year={1984},
    volume={28},
    number={1},
    pages={2-14},
    doi={10.1147/rd.281.0002},
    ISSN={0018-8646},
    month={Jan},
}